// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array arr;
    static int division;
    /** Initializes the library. */
    function void init()
    {
        var int i ,val;
        let i=0;
        let val=1;
        let arr=Array.new(16);
        while(i<16)
        {
            let arr[i]=val;
            let val=val+val;
            let i=i+1;
        }
    return;
    }

    function int pow2(int i)
    {
        return arr[i];
    }

     function int factorTwoMultiply(int num, int factor){
        var int i;
        let i = 0;
        while (i < factor){
            let num = num + num;
            let i = i + 1;
        }
        return num;

    }

    /** Returns the absolute value of x. */
    function int abs(int x)
    {
        if(x<0)
        {
            let x=-x;
        }
        return x;
    }

     function boolean bit(int x, int i)
     {
        return ~((x & arr[i]) = 0);
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y)
    {
        var int sum,shiftx,i;
        var boolean flag;
        let sum=0;
        let i =0;
        let shiftx=x;

        if(x<0)
        {
            return -Math.multiply(-x,y);
        }
        if(y<0)
        {
            return -Math.multiply(x,-y);
        }
        while(i<16)
        {
            let flag=Math.bit(y,i);
            if( flag)
            {
               let sum=sum+shiftx;
            }
            let shiftx=shiftx+shiftx;
            let i=i+1;
        }
        return sum;
    }


   function int divide(int x, int y) {
		let division = 0;
		if (x < 0) {
			if (y < 0) { return Math.dividePositive(-x, -y); }
			else { return -Math.dividePositive(-x, y); }
		}
		else {
			if (y < 0) { return -Math.dividePositive(x, -y); }
			else { return Math.dividePositive(x, y); }
		}
    }

	/** Returns the result of division of positive x by positive y. */
	function int dividePositive(int x, int y) {
		var int q;
		if ((y > x) | (y < 0)) { return 0; }

		let q = Math.dividePositive(x, y + y);
		if ((x - division) < y) {
			return q + q;
		}
		else {
			let division = division + y;
			return q + q + 1;
		}
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x)
    {
		var int y, i, flag;
		let y = 0;
		let i = 7;

		while (i > -1)
		{
			let flag = (y + arr[i]) * (y + arr[i]);
			if ((flag < x) | (flag = x))
			{
			    if(flag>0)
			    {
			        let y = y + arr[i];
                }
			 }
			let i = i - 1;
		}
		return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b)
    {
        if(a>b)
        {
            return a;
        }
        else
        {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b)
    {
          if(a>b)
        {
            return b;
        }
        else
        {
            return a;
        }
    }
}
