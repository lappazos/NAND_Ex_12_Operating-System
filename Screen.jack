// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static boolean color;//true-black,false-white
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init()
    {
    var int i ,val;
        let i=0;
        let val=1;
        let twoToThe=Array.new(16);
        while(i<16)
        {
            let twoToThe[i]=val;
            let val=val+val;
            let i=i+1;
        }
        let screen=16384;
        let color=true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen()
    {
        var int i ;
        let i=0;
        while(i<8192)
        {
            let screen[i]=false;
            let i=i+1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b)
    {
        let color=b;
        return;
    }


    function void drawMask(int address, int mask)
    {
        var int value;
        let value = Memory.peek(address);
        if (color)
        {
            do Memory.poke(address, value | mask);
        }
        else
        {
            do Memory.poke(address, value & (~mask));
        }
        return;
    }


    function int getAddress(int x,int y)
    {
        let y=Math.factorTwoMultiply(y,5);
        return y+(x/16);
    }


    /** Draws the (x,y) pixel, using the current color. */
        function void drawPixel(int x, int y)
        {
        var int address,mask ;
        let address = Screen.getAddress(x,y);
        let mask = twoToThe[x & 15];

        if(color)
        {
            let screen[address] = screen[address] | mask;
        }
        else
        {
            let screen[address] = screen[address] & ~mask;
        }

        return;

    }

    function void drawDiagonal(int x1, int y1, int x2, int y2)
    {
        var int  dx,dy,a, b, diff;
        let dx=x2-x1;
        let dy=y2-y1;
        let a = x1;
        let b = y1;
        let diff = 0;

        if (y1 < y2)
        {
            while ((a < (x2 + 1)) & (b < (y2 + 1)))
            {
                do Screen.drawPixel(a, b);
                if (diff < 0)
                {
                    let a = a + 1;
                    let diff = diff + dy;
                }
                else
                {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        }
        else
        {
            while ((a < (x2 + 1)) & (b > (y2 - 1)))
            {
                do Screen.drawPixel(a, b);
                if (diff < 0)
                {
                    let a = a + 1;
                    let diff = diff - dy;
                }
                else
                 {
                    let b = b - 1;
                    let diff = diff - dx;
                }
            }
        }
    return;
    }

    function void drawHorizontalLine(int y, int x1, int x2){
		var int i;

        let i = x1;
        while (i < (x2 + 1))
        {
				do Screen.drawPixel(i, y);
				let i = i + 1;
        }
		return;
	}

    function void drawVerticalLine(int y1,int y2,int x)
    {
       var int i;

		if (y2 > y1){
			let i = y1;
			while (i < (y2 + 1)) {
				do Screen.drawPixel(x, i);
				let i = i + 1;
			}
		}
		else {
			let i = y2;
			while (i < (y1 + 1)) {
				do Screen.drawPixel(x, i);
				let i = i + 1;
			}
		}

		return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int temp;
        if(x1>x2)
        {
            let temp=x1;
            let x1=x2;
            let x2=temp;
            let temp=y1;
            let y1=y2;
            let y2=temp;
        }
        if (x1 = x2)
        {
            do Screen.drawVerticalLine(y1,y2,x1);
            return;
        }
        if (y1 = y2){
            do Screen.drawHorizontalLine(y1, x1, x2);
            return;
        }
        do Screen.drawDiagonal(x1, y1, x2, y2);

        return;
    }


    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
   function void drawRectangle(int x1, int y1, int x2, int y2)
   {
        while (y1 < y2) {
            do Screen.drawHorizontalLine(y1, x1, x2);
            let y1 = y1 + 1;
        }
        return;
    }


    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r)
    {
       var int dy, sqrt;
		let dy = -r;
		while (dy < r )
		{
			let sqrt = Math.sqrt(r*r- (dy * dy));
			do Screen.drawHorizontalLine(y + dy, x - sqrt, x + sqrt);
			let dy=dy+1;
		}

		return;
    }
}
